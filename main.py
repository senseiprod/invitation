import json

# --- Configuration ---
# The name of the JSON file generated by the previous script
INPUT_FILE = "all_shared_voices.json"
# The name of the new file we will create with the updated IDs
OUTPUT_FILE = "all_shared_voices_updated.json"

def update_voice_names_with_ids():
    """
    Reads a JSON file, replaces the 'name' field of each voice with a
    sequential, zero-padded ID, and saves the result to a new file.
    """
    print(f"Reading data from '{INPUT_FILE}'...")

    try:
        # Open and read the entire JSON file into a Python dictionary
        with open(INPUT_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"ERROR: The file '{INPUT_FILE}' was not found.")
        print("Please make sure the script is in the same directory as your JSON file.")
        return
    except json.JSONDecodeError:
        print(f"ERROR: The file '{INPUT_FILE}' is not a valid JSON file.")
        return

    # Check if the 'voices' key exists and is a list
    if "voices" not in data or not isinstance(data["voices"], list):
        print("ERROR: The JSON file does not contain a 'voices' list at the top level.")
        return

    voices_list = data["voices"]
    total_voices = len(voices_list)
    print(f"Found {total_voices} voices to update.")

    # Iterate through the list of voices using enumerate to get an index
    for index, voice in enumerate(voices_list):
        # The counter for the ID should start at 1, not 0
        voice_id_counter = index + 1
        
        # Format the counter into a 5-digit string with leading zeros (e.g., 1 -> "00001")
        new_name = f"{voice_id_counter:05d}"
        
        # Get the original name for logging purposes (optional)
        original_name = voice.get("name", "[No Original Name]")
        
        # Replace the value of the 'name' key with the new formatted ID
        voice["name"] = new_name
        
        # Print progress for the first few and the last one to show it's working
        if index < 5 or index == total_voices - 1:
            print(f"  - Updating voice {index + 1}: Changed name from '{original_name}' to '{new_name}'")
        elif index == 5:
            print("  - ... (continuing updates)...")
            
    # Now that the `data` dictionary is modified in memory, write it to a new file
    print(f"\nAll voices updated. Writing to new file '{OUTPUT_FILE}'...")

    try:
        with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
            # Use indent=4 for pretty-printing, making the file readable
            json.dump(data, f, indent=4, ensure_ascii=False)
        print(f"\nSuccess! New file '{OUTPUT_FILE}' created with updated IDs.")
    except IOError as e:
        print(f"\nError writing to file: {e}")


# --- Run the script ---
if __name__ == "__main__":
    update_voice_names_with_ids()